<script src="{{ asset('scriptJs/preventStrainForm.js') }}"></script>

{{ form_start(strainForm, {
    'action': is_update 
        ? path('edit_strain', {'id': strain.id}) 
        : path('add_strain'),
    'method': 'POST',
    'attr': {
        'class': is_update ? 'update-form' : ''
    }
}) }}

    {% if is_update %}
        <div class="prime group">
    {% endif %}
            {{ form_row(strainForm.nameStrain) }}
            {{ form_row(strainForm.parentStrain) }}
            {{ form_row(strainForm.specie) }}
            {{ form_row(strainForm.gender) }}
            {{ form_row(strainForm.prelevement) }}  
            {{ form_row(strainForm.genotype) }}
            {{ form_row(strainForm.descriptionGenotype) }}
    {% if is_update %}
        </div>
    {% endif %}

    {% if is_update %}
    <div id="project-add" class="group">
    {% endif %}
        <div id="project-add-info" class="hidden-tags">
            <ul class="project"
                data-index="{{ strainForm.project|length > 0 ? strainForm.project|last.vars.name + 1 : 0 }}"
                data-prototype="{{ form_row(strainForm.project.vars.prototype)|e('html_attr') }}">
                {% for subForm in strainForm.project %}
                    <li>{{ form_row(subForm) }}</li>
                {% endfor %}
            </ul>
        </div>

        <div class="add-btn">
            <label>Project</label>
            <button type="button" class="add_item_link" data-collection-holder-class="project">+</button>
        </div>
    {% if is_update %}
    </div>
    {% endif %}

    {% if is_update %}
        <div id="collec-add" class="group">
    {% endif %}
        <div id="collec-add-info" class="hidden-tags">
            <ul class="collec"
                data-index="{{ strainForm.collec|length > 0 ? strainForm.collec|last.vars.name + 1 : 0 }}"
                data-prototype="{{ form_row(strainForm.collec.vars.prototype)|e('html_attr') }}">
                {% for subForm in strainForm.collec %}
                    <li>{{ form_row(subForm) }}</li>
                {% endfor %}
            </ul>
        </div>

        <div id="collec-add-btn" class="add-btn">
            <label>Collection</label>
            <button type="button" class="add_item_link" data-collection-holder-class="collec">+</button>
        </div>
    {% if is_update %}
    </div>
    {% endif %}

    {% if is_update %}
        <div id="plasmyd-add" class="group">
    {% endif %}
        <div id="plasmyd-add-info" class="hidden-tags">
            <ul class="plasmyd"
                data-index="{{ strainForm.plasmyd|length > 0 ? strainForm.plasmyd|last.vars.name + 1 : 0 }}"
                data-prototype="{{ form_row(strainForm.plasmyd.vars.prototype)|e('html_attr') }}">
                {% for subForm in strainForm.plasmyd %}
                    <li>{{ form_row(subForm) }}</li>
                {% endfor %}
            </ul>
        </div>

        <div id="plasmyd-add-btn" class="add-btn">
            <label>Plasmid</label>
            <button type="button" class="add_item_link" data-collection-holder-class="plasmyd">+</button>
        </div>
    {% if is_update %}
    </div>
    {% endif %}

    {% if is_update %}
    <div id="publication-add" class="group">
    {% endif %}
        <div id="publication-add-info" class="hidden-tags">
            <ul class="publication"
                data-index="{{ strainForm.publication|length > 0 ? strainForm.publication|last.vars.name + 1 : 0 }}"
                data-prototype="{{ form_row(strainForm.publication.vars.prototype)|e('html_attr') }}">
                {% for subForm in strainForm.publication %}
                    <li>{{ form_row(subForm) }}</li>
                {% endfor %}
            </ul>
        </div>

        <div id="publication-add-btn" class="add-btn">
            <label>Publication</label>
            <button type="button" class="add_item_link" data-collection-holder-class="publication">+</button>
        </div>
    {% if is_update %}
    </div>
    {% endif %}

    {% if is_update %}
        <div id="drug-add" class="group long">
    {% endif %}
        <div id="drug-add-info" class="hidden-tags">
            <ul class="drugResistanceOnStrain"
                data-index="{{ strainForm.drugResistanceOnStrain|length > 0 ? strainForm.drugResistanceOnStrain|last.vars.name + 1 : 0 }}"
                data-prototype="{{ form_row(strainForm.drugResistanceOnStrain.vars.prototype)|e('html_attr') }}">
                {% for subForm in strainForm.drugResistanceOnStrain %}
                    <li>{{ form_row(subForm) }}</li>
                {% endfor %}
            </ul>
        </div>

        <div id="drug-add-btn" class="add-btn">
            <label>Drug</label>
            <button type="button" class="add_item_link" data-collection-holder-class="drugResistanceOnStrain">+</button>
        </div>
    {% if is_update %}
        </div>
    {% endif %}

    {% if is_update %}
        <div id="phenotype-add" class="group long">
    {% endif %}
        <div id="phenotype-add-info" class="hidden-tags">
            <ul class="phenotype"
                data-index="{{ strainForm.phenotype|length > 0 ? strainForm.phenotype|last.vars.name + 1 : 0 }}"
                data-prototype="{{ form_row(strainForm.phenotype.vars.prototype)|e('html_attr') }}">
                {% for subForm in strainForm.phenotype %}
                    <li>{{ form_row(subForm) }}</li>
                {% endfor %}
            </ul>
        </div>

        <div id="phenotype-add-btn" class="add-btn">
            <label>Phenotype</label>
            <button type="button" class="add_item_link" data-collection-holder-class="phenotype">+</button>
        </div>
    {% if is_update %}
        </div>
    {% endif %}

    {% if is_update %}
        <div id="sequencing-add" class="group long">
    {% endif %}
        <div id="sequencing-add-info" class="hidden-tags">
            <ul class="sequencing"
                data-index="{{ strainForm.methodSequencing|length > 0 ? strainForm.methodSequencing|last.vars.name + 1 : 0 }}"
                data-prototype="{{ form_row(strainForm.methodSequencing.vars.prototype)|e('html_attr') }}">
                {% for subForm in strainForm.methodSequencing %}
                    <li>{{ form_row(subForm) }}</li>
                {% endfor %}
            </ul>
        </div>

        <div id="sequencing-add-btn" class="add-btn">
            <label>Sequencing</label>
            <button type="button" class="add_item_link" data-collection-holder-class="sequencing">+</button>
        </div>
    {% if is_update %}
        </div>
    {% endif %}

    {% if is_update %}
        <div id="storage-add" class="group long">
    {% endif %}
        <div id="storage-add-info" class="hidden-tags">
            <ul class="storage"
                data-index="{{ strainForm.storage|length > 0 ? strainForm.storage|last.vars.name + 1 : 0 }}"
                data-prototype="{{ form_row(strainForm.storage.vars.prototype)|e('html_attr') }}">
                {% for subForm in strainForm.storage %}
                    <li>{{ form_row(subForm) }}</li>
                {% endfor %}
            </ul>
        </div>

        <div id="storage-add-btn" class="add-btn">
            <label>Storage</label>
            <button type="button" class="add_item_link" data-collection-holder-class="storage">+</button>
        </div>
    {% if is_update %}
        </div>
    {% endif %}

    {% if is_update %}
        <div class="prime2 group">
    {% endif %}
        {{ form_row(strainForm.description) }}
        {{ form_row(strainForm.comment) }}
    {% if is_update %}
        </div>
    {% endif %}

    <button class="btn-form" type="submit" id="sendButton">{{ button_label | default('Add strain') }} </button>

{{ form_end(strainForm) }}

<script>

function toggleStorage() {
    event.preventDefault();
    var storageDiv = document.getElementById("storage");
    if (storageDiv.style.display === "none") {
        storageDiv.style.display = "block";
    } else {
        storageDiv.style.display = "none";
    }
}

function selectOptionByValue(selectElementId, value) {
    const selectElement = document.getElementById(selectElementId);
    const optionToSelect = selectElement.querySelector(`option[value="${value}"]`);
    if (optionToSelect) {
        selectElement.value = value;  // Sélectionne l'option
    } else {
        console.error(`Option with value "${value}" not found in ${selectElementId}`);
    }
}

document.addEventListener('DOMContentLoaded', () => {
    const searchButton = document.querySelector('.search-button');
    const parentStrainIdField = document.getElementById('strain_form_parentStrain');
    
    searchButton.addEventListener('click', async () => {
        const strainId = parentStrainIdField.value;

        if (!strainId) {
            alert('Veuillez entrer un ID de souche.');
            return;
        }

        try {
            const response = await fetch(`/api/strain/${strainId}`);
            console.log(response.ok)
            if (!response.ok) {
                throw new Error('Strain non trouvée.');
            }

            const data = await response.json();

            console.log(data);

            document.getElementById('strain_form_nameStrain').value = data.name;
            document.getElementById('strain_form_specie').value = data.specie;
            document.getElementById('strain_form_gender').value = data.gender;
            document.getElementById('strain_form_comment').value = data.comment;
            document.getElementById('strain_form_description').value = data.description;
            selectOptionByValue('strain_form_genotype', data.genotype);
            
            } catch (error) {
                alert('Erreur lors de la recherche de la souche : ' + error.message);
            }
    });
});

document.querySelectorAll('.add_item_link').forEach(btn => {
    btn.addEventListener("click", (e) => {
        const collectionClass = e.currentTarget.dataset.collectionHolderClass;
        const collectionDiv = document.querySelector('.' + collectionClass).closest('div');

        // Afficher le <div> masqué
        if (collectionDiv.classList.contains('hidden-tags')) {
            collectionDiv.classList.remove('hidden-tags');
        }

        // Ajouter un nouvel élément à la collection
        addFormToCollection(e);
    });
});
  
function addFormToCollection(e) {
    const collectionClass = e.currentTarget.dataset.collectionHolderClass;
    const collectionHolder = document.querySelector('.' + collectionClass);

    if (!collectionHolder.dataset.index) {
        collectionHolder.dataset.index = collectionHolder.children.length;
    }

    const index = collectionHolder.dataset.index;

    // Créer le nouvel élément à partir du prototype
    const item = document.createElement('li');
    item.innerHTML = collectionHolder.dataset.prototype.replace(/__name__/g, index);

    // Ajouter au DOM
    collectionHolder.appendChild(item);
       // Ajouter au DOM (avant le bouton spécial 🆕 s’il existe)
    const specialLi = collectionHolder.querySelector('li.create-plasmid-li');
    if (specialLi) {
        collectionHolder.insertBefore(item, specialLi);
    } else {
        collectionHolder.appendChild(item);
    }

    // Copier les valeurs depuis le dernier élément si existant
    if (!collectionHolder.classList.contains('drugResistanceOnStrain')) {
        const existingItems = collectionHolder.querySelectorAll('li');
        if (existingItems.length > 1) {
            const lastItem = existingItems[existingItems.length - 2]; // Avant-dernier (le dernier est celui qu'on vient d'ajouter)

            const lastInputs = lastItem.querySelectorAll('input, select, textarea');
            const newInputs = item.querySelectorAll('input, select, textarea');
            lastInputs.forEach((input, i) => {
                if (newInputs[i]) {
                    if (input.tagName === 'SELECT') {
                        newInputs[i].value = input.value;
                    } else if (input.type === 'checkbox' || input.type === 'radio') {
                        newInputs[i].checked = input.checked;
                    } else if (input.type === 'file') {
                        newInputs[i].value = ''; 
                    } else {
                        newInputs[i].value = input.value;
                    }
                }
            });
        }
    }


    // Mettre à jour le label
    const labelType = e.currentTarget.closest('div')?.querySelector('label')?.textContent.trim();
    const label = item.querySelector('label');
    if (label && labelType) {
        label.textContent = `${labelType} ${parseInt(index) + 1}`;
    }

    // Ajouter le bouton de suppression
    addTagFormDeleteLink(item);

    // Incrémenter l'index
    collectionHolder.dataset.index++;

    if (collectionHolder.classList.contains('plasmyd')) {
        ensureCreatePlasmidButton(collectionHolder);
    }
}

  document
    .querySelectorAll('ul.drugResistanceOnStrain li, ul.sequencing li, ul.phenotype li, ul.storage li')
    .forEach((tag) => {
        addTagFormDeleteLink(tag)
    })

    function addTagFormDeleteLink(tag) {
        const removeFormButton = document.createElement('button');
        removeFormButton.innerText = 'x';
        removeFormButton.classList.add('remove-tag-btn'); // Ajoute une classe pour le bouton

        // Ajoute le bouton après le premier element (ou autre contenu du tag)
        const firstElement = tag.querySelector('select, input');
        firstElement.after(removeFormButton);

        removeFormButton.addEventListener('click', (e) => {
        e.preventDefault();
        const ul = tag.parentElement; // La liste contenant le tag
        const containerDiv = ul.closest('div'); // La <div> qui entoure la liste

        // Supprime l'élément complet
        tag.remove();

        // Vérifie si la liste est vide (hors li spécial)
        const realItems = ul.querySelectorAll('li:not(.create-plasmid-li)');
        if (realItems.length === 0) {
            containerDiv.classList.add('hidden-tags'); // masque la div si tu veux
            // Supprime le bouton spécial aussi
            const specialLi = ul.querySelector('li.create-plasmid-li');
            if (specialLi) specialLi.remove();
        }
    });
}
</script>

<!-- Modal pour créer un nouveau plasmide -->
<div id="plasmid-modal" class="modal" style="display: none; position: fixed; z-index: 1000; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0,0,0,0.4);">
    <div class="modal-content" style="background-color: #fefefe; margin: 10% auto; padding: 20px; border: 1px solid #888; width: 80%; max-width: 600px; border-radius: 5px;">
        <span class="close-modal" style="color: #aaa; float: right; font-size: 28px; font-weight: bold; cursor: pointer;">&times;</span>
        <h2>Create a new plasmid</h2>
        <div id="plasmid-form-container">
            <form id="plasmid-create-form">
                <div class="form-group">
                    <label for="plasmid_name">Name</label>
                    <input type="text" id="plasmid_name" name="namePlasmyd" required class="form-control">
                </div>
                <div class="form-group">
                    <label for="plasmid_name">Type</label>
                    <select id="plasmid_type" name="type" required class="form-control">
                        <option value="WT">WT</option>
                        <option value="GMO">synthetic</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="plasmid_description">Description</label>
                    <textarea id="plasmid_description" name="description" class="form-control"></textarea>
                </div>
                <div class="form-group">
                    <label for="plasmid_comment">Comment</label>
                    <textarea id="plasmid_comment" name="comment" class="form-control"></textarea>
                </div>
                <button type="submit" class="btn-form">Add this plasmid</button>
            </form>
        </div>
        <div id="plasmid-form-result" style="margin-top: 20px; display: none;"></div>
    </div>
</div>

<script>
// Fonction qui garantit qu’il y a un li spécial "Créer un plasmide"
function ensureCreatePlasmidButton(collectionHolder) {
    // Compter uniquement les vrais items (exclure le li spécial)
    const items = collectionHolder.querySelectorAll('li:not(.create-plasmid-li)');
    let specialLi = collectionHolder.querySelector('li.create-plasmid-li');

    if (!specialLi) {
        specialLi = document.createElement('li');
        specialLi.classList.add('create-plasmid-li');

        const createBtn = document.createElement('button');
        createBtn.type = 'button';
        createBtn.id = 'create-plasmid-btn';
        createBtn.className = 'add_item_plasmid create-plasmid-btn';
        createBtn.title = 'Create a new plasmid';
        createBtn.textContent = 'Create a new plasmid';

        createBtn.addEventListener('click', function() {
            document.getElementById('plasmid-modal').style.display = 'block';
        });

        specialLi.appendChild(createBtn);
        collectionHolder.appendChild(specialLi);
    }

    // ✅ Masquer si aucun élément, sinon afficher
    if (items.length === 0) {
        specialLi.style.display = 'none';
    } else {
        specialLi.style.display = '';
        collectionHolder.appendChild(specialLi); // le replacer toujours en bas
    }
}


// Gestion de la modal pour la création de plasmide
document.addEventListener('DOMContentLoaded', function() {
    const plasmidUl = document.querySelector('ul.plasmyd');
    if (plasmidUl && typeof ensureCreatePlasmidButton === 'function') {
        ensureCreatePlasmidButton(plasmidUl);
    }

    // Éléments DOM
    const modal     = document.getElementById('plasmid-modal');
    const createBtn = document.getElementById('create-plasmid-btn');
    const closeBtn  = document.querySelector('.close-modal');
    const form      = document.getElementById('plasmid-create-form');
    const resultDiv = document.getElementById('plasmid-form-result');

    // --- Helpers UI ---
    function showMessage(html, color = null) {
        resultDiv.innerHTML = html;
        if (color) resultDiv.style.color = color;
        resultDiv.style.display = 'block';
    }
    function clearMessage() {
        resultDiv.innerHTML = '';
        resultDiv.style.display = 'none';
        resultDiv.style.removeProperty('color');
    }

    // Ouvrir la modal
    createBtn?.addEventListener('click', function() {
        clearMessage();
        modal.style.display = 'block';
    });

    // Fermer la modal
    closeBtn?.addEventListener('click', function() {
        modal.style.display = 'none';
        form.reset();
        clearMessage();
    });

    // Fermer la modal si clic en dehors
    window.addEventListener('click', function(event) {
        if (event.target === modal) {
            modal.style.display = 'none';
            form.reset();
            clearMessage();
        }
    });

    // --- POST API avec fallback / logs / gestion non-JSON ---
    async function postPlasmid(formData) {
        const urls = ['/public/api/plasmyd/create', '/api/plasmyd/create']; // primary + fallback
        let lastErr = null;

        for (const url of urls) {
            try {
                console.log('[Plasmid][POST] ->', url, formData);
                const res = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    credentials: 'same-origin', // envoie cookies de session si besoin
                    body: JSON.stringify(formData)
                });

                const raw = await res.text(); // lire une seule fois
                let data = null;
                try { data = raw ? JSON.parse(raw) : null; }
                catch (e) {
                    console.warn('[Plasmid] Réponse non-JSON. Corps brut:', raw);
                }

                console.log('[Plasmid][RESP]', res.status, data ?? raw);

                if (!res.ok) {
                    // Message serveur si fourni, sinon code HTTP
                    const msg = (data && data.message) ? data.message : `HTTP ${res.status}`;
                    throw new Error(msg);
                }

                // Succès
                return data || { success: true, message: 'Plasmide créé.', plasmid: null };

            } catch (e) {
                console.warn('[Plasmid] Failed on', url, '→', e.message);
                lastErr = e;
                // on tente l’URL suivante
            }
        }

        // Si toutes les URLs ont échoué
        throw lastErr || new Error('Network / server error');
    }

    // Gérer la soumission du formulaire
    form?.addEventListener('submit', async function(e) {
        e.preventDefault();

        // Récupérer les données du formulaire
        const formData = {
            namePlasmyd: document.getElementById('plasmid_name')?.value?.trim() || '',
            type:        document.getElementById('plasmid_type')?.value?.trim() || '',
            description: document.getElementById('plasmid_description')?.value?.trim() || '',
            comment:     document.getElementById('plasmid_comment')?.value?.trim() || ''
        };

        // Petites validations côté client
        if (!formData.namePlasmyd || !formData.type) {
            showMessage('Please fill in at least the plasmid name and type.', 'red');
            return;
        }

        // UI: état de chargement
        showMessage('Plasmid creation in progress…');
        const submitBtn = form.querySelector('button[type="submit"], input[type="submit"]');
        if (submitBtn) submitBtn.disabled = true;

        try {
            const data = await postPlasmid(formData);

            if (data?.success) {
                showMessage((data.message || 'Plasmid created successfully.'), 'green');
                form.reset();

                // Mettre à jour les sélecteurs si on reçoit l’objet plasmid
                if (data.plasmid) updatePlasmidSelectors(data.plasmid);

                // Fermer la modal après un court délai
                setTimeout(() => {
                    modal.style.display = 'none';
                    clearMessage();
                }, 1500);
            } else {
                showMessage((data?.message || 'Plasmid creation failed.'), 'red');
            }
        } catch (error) {
            console.error('[Plasmid] Error:', error);
            showMessage('An error occurred while communicating with the server.', 'red');
        } finally {
            if (submitBtn) submitBtn.disabled = false;
        }
    });

    // Mettre à jour les sélecteurs de plasmide
    function updatePlasmidSelectors(plasmid) {
        // Trouver tous les <select> ciblant un plasmide (suffixe _plasmyd)
        const plasmidSelectors = document.querySelectorAll('select[id$="_plasmyd"]');
        if (!plasmidSelectors.length) return;

        plasmidSelectors.forEach(selector => {
            // Vérifie si l’option existe déjà (évite doublons)
            const exists = Array.from(selector.options).some(opt => String(opt.value) === String(plasmid.id));
            if (!exists) {
                const option = document.createElement('option');
                option.value = plasmid.id;
                option.text  = `${plasmid.name} - ${plasmid.type}`;
                selector.appendChild(option);
            }
            // Sélectionner la nouvelle option
            selector.value = plasmid.id;
        });
    }
});

</script>

<!--
  TITRE : Auto-fix overflow (Phenotype / Sequencing / Storage / Plasmid) — version robuste
  OBJET : Au premier rendu, certains blocs débordent tant que la liste (ul) est cachée (.hidden-tags).
          On mime 1 clic sur “+” pour dévoiler et recalculer le layout, puis on supprime l’item ajouté
          et on restaure l’index. Exécution unique + suppression fiable (ignore create-plasmid-li).
  PLACEMENT : juste après {{ form_end(strainForm) }}
-->

<script>
(function () {
  // Empêche toute exécution multiple
  if (window.__GRIDFIX_ONCE__) return;
  window.__GRIDFIX_ONCE__ = true;

  // bouton "add" -> bloc contenant la <ul>
  const MAP = {
    '#phenotype-add-btn':  '#phenotype-add',
    '#sequencing-add-btn': '#sequencing-add',
    '#storage-add-btn':    '#storage-add',
    '#publication-add-btn': '#publication-add',
    '#project-add-btn':     '#project-add',
    '#plasmyd-add-btn':    '#plasmyd-add'
  };

  function removeLastRealItem(ul) {
    // Récupère le dernier <li> qui n'est PAS .create-plasmid-li
    const items = ul.querySelectorAll('li:not(.create-plasmid-li)');
    if (!items.length) return;
    const lastReal = items[items.length - 1];
    lastReal.remove();
  }

  function mimicOne(btnWrapSel, blockSel) {
    const btn   = document.querySelector(`${btnWrapSel} .add_item_link`);
    const block = document.querySelector(blockSel);
    const ul    = block && block.querySelector('ul');
    if (!btn || !ul) return;

    // On ne “mimique” que si la liste est encore masquée par .hidden-tags
    const hiddenWrapper = ul.closest('.hidden-tags');
    if (!hiddenWrapper) return;

    // Évite de traiter 2 fois ce même UL
    if (ul.dataset.gridfixApplied === '1') return;
    ul.dataset.gridfixApplied = '1';

    const beforeIndex = parseInt(ul.dataset.index || ul.children.length, 10) || 0;

    // 1) Ajout via ton handler (retire .hidden-tags + recalcule la grille)
    btn.click();

    // 2) Retirer l’élément ajouté + remettre l’index, puis mini reflow
    setTimeout(() => {
      removeLastRealItem(ul);
      ul.dataset.index = String(beforeIndex);

      const prevDisplay = block.style.display;
      block.style.display = 'none';
      // force reflow
      void block.offsetHeight;
      block.style.display = prevDisplay || '';
    }, 0);
  }

  function runAllOnce() {
    Object.entries(MAP).forEach(([btnSel, blockSel]) => mimicOne(btnSel, blockSel));
  }

  // Une seule exécution suffit
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', runAllOnce, { once: true });
  } else {
    runAllOnce();
  }
})();
</script>
