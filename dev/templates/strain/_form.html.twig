{{ form_start(strainForm, {
    'action': is_update 
        ? path('edit_strain', {'id': strain.id}) 
        : path('add_strain'),
    'method': 'POST',
    'attr': {
        'class': is_update ? 'update-form' : ''
    }
}) }}

    {% if is_update %}
        <div class="prime group">
    {% endif %}
            {{ form_row(strainForm.nameStrain) }}
            {{ form_row(strainForm.parentStrain) }}
            {{ form_row(strainForm.specie) }}
            {{ form_row(strainForm.gender) }}
            {{ form_row(strainForm.prelevement) }}  
            {{ form_row(strainForm.genotype) }}
            {{ form_row(strainForm.descriptionGenotype) }}
    {% if is_update %}
        </div>
    {% endif %}

    {% if is_update %}
    <div id="project-add" class="group">
    {% endif %}
        <div id="project-add-info" class="hidden-tags">
            <ul class="project"
                data-index="{{ strainForm.project|length > 0 ? strainForm.project|last.vars.name + 1 : 0 }}"
                data-prototype="{{ form_row(strainForm.project.vars.prototype)|e('html_attr') }}">
                {% for subForm in strainForm.project %}
                    <li>{{ form_row(subForm) }}</li>
                {% endfor %}
            </ul>
        </div>

        <div class="add-btn">
            <label>Project</label>
            <button type="button" class="add_item_link" data-collection-holder-class="project">+</button>
        </div>
    {% if is_update %}
    </div>
    {% endif %}

    {% if is_update %}
        <div id="collec-add" class="group">
    {% endif %}
        <div id="collec-add-info" class="hidden-tags">
            <ul class="collec"
                data-index="{{ strainForm.collec|length > 0 ? strainForm.collec|last.vars.name + 1 : 0 }}"
                data-prototype="{{ form_row(strainForm.collec.vars.prototype)|e('html_attr') }}">
                {% for subForm in strainForm.collec %}
                    <li>{{ form_row(subForm) }}</li>
                {% endfor %}
            </ul>
        </div>

        <div id="collec-add-btn" class="add-btn">
            <label>Collection</label>
            <button type="button" class="add_item_link" data-collection-holder-class="collec">+</button>
        </div>
    {% if is_update %}
    </div>
    {% endif %}

    {% if is_update %}
        <div id="plasmyd-add" class="group">
    {% endif %}
        <div id="plasmyd-add-info" class="hidden-tags">
            <ul class="plasmyd"
                data-index="{{ strainForm.plasmyd|length > 0 ? strainForm.plasmyd|last.vars.name + 1 : 0 }}"
                data-prototype="{{ form_row(strainForm.plasmyd.vars.prototype)|e('html_attr') }}">
                {% for subForm in strainForm.plasmyd %}
                    <li>{{ form_row(subForm) }}</li>
                {% endfor %}
            </ul>
        </div>

        <div id="plasmyd-add-btn" class="add-btn">
            <label>Plasmid</label>
            <button type="button" class="add_item_link" data-collection-holder-class="plasmyd">+</button>
        </div>
    {% if is_update %}
    </div>
    {% endif %}

    {% if is_update %}
    <div id="publication-add" class="group">
    {% endif %}
        <div id="publication-add-info" class="hidden-tags">
            <ul class="publication"
                data-index="{{ strainForm.publication|length > 0 ? strainForm.publication|last.vars.name + 1 : 0 }}"
                data-prototype="{{ form_row(strainForm.publication.vars.prototype)|e('html_attr') }}">
                {% for subForm in strainForm.publication %}
                    <li>{{ form_row(subForm) }}</li>
                {% endfor %}
            </ul>
        </div>

        <div id="publication-add-btn" class="add-btn">
            <label>Publication</label>
            <button type="button" class="add_item_link" data-collection-holder-class="publication">+</button>
        </div>
    {% if is_update %}
    </div>
    {% endif %}

    {% if is_update %}
        <div id="drug-add" class="group long">
    {% endif %}
        <div id="drug-add-info" class="hidden-tags">
            <ul class="drugResistanceOnStrain"
                data-index="{{ strainForm.drugResistanceOnStrain|length > 0 ? strainForm.drugResistanceOnStrain|last.vars.name + 1 : 0 }}"
                data-prototype="{{ form_row(strainForm.drugResistanceOnStrain.vars.prototype)|e('html_attr') }}">
                {% for subForm in strainForm.drugResistanceOnStrain %}
                    <li>{{ form_row(subForm) }}</li>
                {% endfor %}
            </ul>
        </div>

        <div id="drug-add-btn" class="add-btn">
            <label>Drug</label>
            <button type="button" class="add_item_link" data-collection-holder-class="drugResistanceOnStrain">+</button>
        </div>
    {% if is_update %}
        </div>
    {% endif %}

    {% if is_update %}
        <div id="phenotype-add" class="group long">
    {% endif %}
        <div id="phenotype-add-info" class="hidden-tags">
            <ul class="phenotype"
                data-index="{{ strainForm.phenotype|length > 0 ? strainForm.phenotype|last.vars.name + 1 : 0 }}"
                data-prototype="{{ form_row(strainForm.phenotype.vars.prototype)|e('html_attr') }}">
                {% for subForm in strainForm.phenotype %}
                    <li>{{ form_row(subForm) }}</li>
                {% endfor %}
            </ul>
        </div>

        <div id="phenotype-add-btn" class="add-btn">
            <label>Phenotype</label>
            <button type="button" class="add_item_link" data-collection-holder-class="phenotype">+</button>
        </div>
    {% if is_update %}
        </div>
    {% endif %}

    {% if is_update %}
        <div id="sequencing-add" class="group long">
    {% endif %}
        <div id="sequencing-add-info" class="hidden-tags">
            <ul class="sequencing"
                data-index="{{ strainForm.methodSequencing|length > 0 ? strainForm.methodSequencing|last.vars.name + 1 : 0 }}"
                data-prototype="{{ form_row(strainForm.methodSequencing.vars.prototype)|e('html_attr') }}">
                {% for subForm in strainForm.methodSequencing %}
                    <li>{{ form_row(subForm) }}</li>
                {% endfor %}
            </ul>
        </div>

        <div id="sequencing-add-btn" class="add-btn">
            <label>Sequencing</label>
            <button type="button" class="add_item_link" data-collection-holder-class="sequencing">+</button>
        </div>
    {% if is_update %}
        </div>
    {% endif %}

    {% if is_update %}
        <div id="storage-add" class="group long">
    {% endif %}
        <div id="storage-add-info" class="hidden-tags">
            <ul class="storage"
                data-index="{{ strainForm.storage|length > 0 ? strainForm.storage|last.vars.name + 1 : 0 }}"
                data-prototype="{{ form_row(strainForm.storage.vars.prototype)|e('html_attr') }}">
                {% for subForm in strainForm.storage %}
                    <li>{{ form_row(subForm) }}</li>
                {% endfor %}
            </ul>
        </div>

        <div id="storage-add-btn" class="add-btn">
            <label>Storage</label>
            <button type="button" class="add_item_link" data-collection-holder-class="storage">+</button>
        </div>
    {% if is_update %}
        </div>
    {% endif %}

    {% if is_update %}
        <div class="prime2 group">
    {% endif %}
        {{ form_row(strainForm.description) }}
        {{ form_row(strainForm.comment) }}
    {% if is_update %}
        </div>
    {% endif %}

    <button class="btn-form" type="submit">{{ button_label | default('Add strain') }} </button>

{{ form_end(strainForm) }}

<script>

function toggleStorage() {
    event.preventDefault();
    var storageDiv = document.getElementById("storage");
    if (storageDiv.style.display === "none") {
        storageDiv.style.display = "block";
    } else {
        storageDiv.style.display = "none";
    }
}

function selectOptionByValue(selectElementId, value) {
    const selectElement = document.getElementById(selectElementId);
    const optionToSelect = selectElement.querySelector(`option[value="${value}"]`);
    if (optionToSelect) {
        selectElement.value = value;  // Sélectionne l'option
    } else {
        console.error(`Option with value "${value}" not found in ${selectElementId}`);
    }
}

document.addEventListener('DOMContentLoaded', () => {
    const searchButton = document.querySelector('.search-button');
    const parentStrainIdField = document.getElementById('strain_form_parentStrain');
    
    searchButton.addEventListener('click', async () => {
        const strainId = parentStrainIdField.value;

        if (!strainId) {
            alert('Veuillez entrer un ID de souche.');
            return;
        }

        try {
            const response = await fetch(`/api/strain/${strainId}`);
            console.log(response.ok)
            if (!response.ok) {
                throw new Error('Strain non trouvée.');
            }

            const data = await response.json();

            console.log(data);

            document.getElementById('strain_form_nameStrain').value = data.name;
            document.getElementById('strain_form_specie').value = data.specie;
            document.getElementById('strain_form_gender').value = data.gender;
            document.getElementById('strain_form_comment').value = data.comment;
            document.getElementById('strain_form_description').value = data.description;
            selectOptionByValue('strain_form_genotype', data.genotype);
            
            } catch (error) {
                alert('Erreur lors de la recherche de la souche : ' + error.message);
            }
    });
});

document.querySelectorAll('.add_item_link').forEach(btn => {
    btn.addEventListener("click", (e) => {
        const collectionClass = e.currentTarget.dataset.collectionHolderClass;
        const collectionDiv = document.querySelector('.' + collectionClass).closest('div');

        // Afficher le <div> masqué
        if (collectionDiv.classList.contains('hidden-tags')) {
            collectionDiv.classList.remove('hidden-tags');
        }

        // Ajouter un nouvel élément à la collection
        addFormToCollection(e);
    });
});
  
function addFormToCollection(e) {
    const collectionClass = e.currentTarget.dataset.collectionHolderClass;
    const collectionHolder = document.querySelector('.' + collectionClass);

    if (!collectionHolder.dataset.index) {
        collectionHolder.dataset.index = collectionHolder.children.length;
    }

    const index = collectionHolder.dataset.index;

    // Créer le nouvel élément à partir du prototype
    const item = document.createElement('li');
    item.innerHTML = collectionHolder.dataset.prototype.replace(/__name__/g, index);

    // Ajouter au DOM
    collectionHolder.appendChild(item);
       // Ajouter au DOM (avant le bouton spécial 🆕 s’il existe)
    const specialLi = collectionHolder.querySelector('li.create-plasmid-li');
    if (specialLi) {
        collectionHolder.insertBefore(item, specialLi);
    } else {
        collectionHolder.appendChild(item);
    }

    // Copier les valeurs depuis le dernier élément si existant
    const existingItems = collectionHolder.querySelectorAll('li');
    if (existingItems.length > 1) {
        const lastItem = existingItems[existingItems.length - 2]; // Avant-dernier (le dernier est celui qu'on vient d'ajouter)

        const lastInputs = lastItem.querySelectorAll('input, select, textarea');
        const newInputs = item.querySelectorAll('input, select, textarea');
        lastInputs.forEach((input, i) => {
            if (newInputs[i]) {
                if (input.tagName === 'SELECT') {
                    newInputs[i].value = input.value;
                } else if (input.type === 'checkbox' || input.type === 'radio') {
                    newInputs[i].checked = input.checked;
                } else if (input.type === 'file') {
                    newInputs[i].value = ''; 
                } else {
                    newInputs[i].value = input.value;
                }
            }
        });
    }

    // Mettre à jour le label
    const labelType = e.currentTarget.closest('div')?.querySelector('label')?.textContent.trim();
    const label = item.querySelector('label');
    if (label && labelType) {
        label.textContent = `${labelType} ${parseInt(index) + 1}`;
    }

    // Ajouter le bouton de suppression
    addTagFormDeleteLink(item);

    // Incrémenter l'index
    collectionHolder.dataset.index++;

    if (collectionHolder.classList.contains('plasmyd')) {
        ensureCreatePlasmidButton(collectionHolder);
    }
}

  document
    .querySelectorAll('ul.drugResistanceOnStrain li, ul.sequencing li, ul.phenotype li, ul.storage li')
    .forEach((tag) => {
        addTagFormDeleteLink(tag)
    })

    function addTagFormDeleteLink(tag) {
        const removeFormButton = document.createElement('button');
        removeFormButton.innerText = 'x';
        removeFormButton.classList.add('remove-tag-btn'); // Ajoute une classe pour le bouton

        // Ajoute le bouton après le premier element (ou autre contenu du tag)
        const firstElement = tag.querySelector('select, input');
        firstElement.after(removeFormButton);

        removeFormButton.addEventListener('click', (e) => {
        e.preventDefault();
        const ul = tag.parentElement; // La liste contenant le tag
        const containerDiv = ul.closest('div'); // La <div> qui entoure la liste

        // Supprime l'élément complet
        tag.remove();

        // Vérifie si la liste est vide (hors li spécial)
        const realItems = ul.querySelectorAll('li:not(.create-plasmid-li)');
        if (realItems.length === 0) {
            containerDiv.classList.add('hidden-tags'); // masque la div si tu veux
            // Supprime le bouton spécial aussi
            const specialLi = ul.querySelector('li.create-plasmid-li');
            if (specialLi) specialLi.remove();
        }
    });
}
</script>

<!-- Modal pour créer un nouveau plasmide -->
<div id="plasmid-modal" class="modal" style="display: none; position: fixed; z-index: 1000; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0,0,0,0.4);">
    <div class="modal-content" style="background-color: #fefefe; margin: 10% auto; padding: 20px; border: 1px solid #888; width: 80%; max-width: 600px; border-radius: 5px;">
        <span class="close-modal" style="color: #aaa; float: right; font-size: 28px; font-weight: bold; cursor: pointer;">&times;</span>
        <h2>Create a new plasmid</h2>
        <div id="plasmid-form-container">
            <form id="plasmid-create-form">
                <div class="form-group">
                    <label for="plasmid_name">Name</label>
                    <input type="text" id="plasmid_name" name="namePlasmyd" required class="form-control">
                </div>
                <div class="form-group">
                    <label for="plasmid_name">Type</label>
                    <select id="plasmid_type" name="type" required class="form-control">
                        <option value="WT">WT</option>
                        <option value="GMO">GMO</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="plasmid_description">Description</label>
                    <textarea id="plasmid_description" name="description" class="form-control"></textarea>
                </div>
                <div class="form-group">
                    <label for="plasmid_comment">Comment</label>
                    <textarea id="plasmid_comment" name="comment" class="form-control"></textarea>
                </div>
                <button type="submit" class="btn-form">Add this plasmid</button>
            </form>
        </div>
        <div id="plasmid-form-result" style="margin-top: 20px; display: none;"></div>
    </div>
</div>

<script>
// Fonction qui garantit qu’il y a un li spécial "Créer un plasmide"
function ensureCreatePlasmidButton(collectionHolder) {
    // Compter uniquement les vrais items (exclure le li spécial)
    const items = collectionHolder.querySelectorAll('li:not(.create-plasmid-li)');
    let specialLi = collectionHolder.querySelector('li.create-plasmid-li');

    if (!specialLi) {
        specialLi = document.createElement('li');
        specialLi.classList.add('create-plasmid-li');

        const createBtn = document.createElement('button');
        createBtn.type = 'button';
        createBtn.id = 'create-plasmid-btn';
        createBtn.className = 'add_item_plasmid create-plasmid-btn';
        createBtn.title = 'Create a new plasmid';
        createBtn.textContent = 'Create a new plasmid';

        createBtn.addEventListener('click', function() {
            document.getElementById('plasmid-modal').style.display = 'block';
        });

        specialLi.appendChild(createBtn);
        collectionHolder.appendChild(specialLi);
    }

    // ✅ Masquer si aucun élément, sinon afficher
    if (items.length === 0) {
        specialLi.style.display = 'none';
    } else {
        specialLi.style.display = '';
        collectionHolder.appendChild(specialLi); // le replacer toujours en bas
    }
}


// Gestion de la modal pour la création de plasmide
document.addEventListener('DOMContentLoaded', function() {
    const plasmidUl = document.querySelector('ul.plasmyd');
    if (plasmidUl) {
        ensureCreatePlasmidButton(plasmidUl);
    }
    // Éléments DOM
    const modal = document.getElementById('plasmid-modal');
    const createBtn = document.getElementById('create-plasmid-btn');
    const closeBtn = document.querySelector('.close-modal');
    const form = document.getElementById('plasmid-create-form');
    const resultDiv = document.getElementById('plasmid-form-result');
    
    // Ouvrir la modal
    createBtn.addEventListener('click', function() {
        modal.style.display = 'block';
    });
    
    // Fermer la modal
    closeBtn.addEventListener('click', function() {
        modal.style.display = 'none';
        // Réinitialiser le formulaire et les messages
        form.reset();
        resultDiv.style.display = 'none';
    });
    
    // Fermer la modal si on clique en dehors
    window.addEventListener('click', function(event) {
        if (event.target === modal) {
            modal.style.display = 'none';
            // Réinitialiser le formulaire et les messages
            form.reset();
            resultDiv.style.display = 'none';
        }
    });
    
    // Gérer la soumission du formulaire
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Afficher un message de chargement
        resultDiv.innerHTML = '<p>Création du plasmide en cours...</p>';
        resultDiv.style.display = 'block';
        
        // Récupérer les données du formulaire
        const formData = {
            namePlasmyd: document.getElementById('plasmid_name').value,
            type: document.getElementById('plasmid_type').value,
            description: document.getElementById('plasmid_description').value,
            comment: document.getElementById('plasmid_comment').value
        };
        
        // Envoyer les données à l'API
        fetch('/api/plasmyd/create', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Afficher un message de succès
                resultDiv.innerHTML = '<p style="color: green;">' + data.message + '</p>';
                
                // Réinitialiser le formulaire
                form.reset();
                
                // Mettre à jour les sélecteurs de plasmide dans le formulaire
                updatePlasmidSelectors(data.plasmid);
                
                // Fermer la modal après 2 secondes
                setTimeout(() => {
                    modal.style.display = 'none';
                    resultDiv.style.display = 'none';
                }, 2000);
            } else {
                // Afficher un message d'erreur
                resultDiv.innerHTML = '<p style="color: red;">' + data.message + '</p>';
            }
        })
        .catch(error => {
            console.error('Error:', error);
            resultDiv.innerHTML = '<p style="color: red;">Une erreur est survenue lors de la communication avec le serveur.</p>';
        });
    });
    
    // Fonction pour mettre à jour les sélecteurs de plasmide
    function updatePlasmidSelectors(plasmid) {
        // Trouver tous les sélecteurs de plasmide dans le formulaire
        const plasmidSelectors = document.querySelectorAll('select[id$="_plasmyd"]');
        
        if (plasmidSelectors.length > 0) {
            plasmidSelectors.forEach(selector => {
                // Créer une nouvelle option
                const option = document.createElement('option');
                option.value = plasmid.id;
                option.text = plasmid.name + ' - ' + plasmid.type;
                
                // Ajouter l'option au sélecteur
                selector.appendChild(option);
                
                // Sélectionner la nouvelle option
                selector.value = plasmid.id;
            });
        }
    }
});
</script>